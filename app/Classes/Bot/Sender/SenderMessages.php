<?php

namespace App\Classes\Bot\Sender;

use App\Classes\Bot\Buttons\Buttons;
use App\Classes\Bot\Registration;
use App\Classes\Cron\CronModel\CronModel;
use Telegram;
use Telegram\Bot\Keyboard\Keyboard;

class SenderMessages
{
    protected static $_instance;

    private function __construct() {
    }

    public static function getInstance() {
        if (self::$_instance === null) {
            self::$_instance = new self;
        }

        return self::$_instance;
    }

    private function __clone() {
    }

    private function __wakeup() {
    }

    public function startBot($text, $userId, $userName, $userFirstName) {
        if (mb_stristr($text, '/start')) {
            if (isset(explode(' ', $text)[1]))
                Telegram::sendMessage([
                    'chat_id' => explode(' ', $text)[1],
                    'text' => "–í–∞—à —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 0.1%",
                    'parse_mode' => 'HTML',
                ]);

            $response = Registration\Registration::getInstance()->registerUserIfNoExist($text, $userId, $userName, $userFirstName);

            $reply_markup = Keyboard::make([
                'keyboard' => Buttons::getInstance()->returnMainMenuButtons(),
                'resize_keyboard' => true,
            ]);

            if ($response)
                Telegram::sendMessage([
                    'chat_id' => $userId,
                    'text' => "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!ü•≥\n–ü–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!\n–ï—Å–ª–∏ –∏–º –æ–∫–∞–∂–∏—Ç–µ—Å—å –≤—ã, –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üõé",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $reply_markup
                ]);
            else
                Telegram::sendMessage([
                    'chat_id' => $userId,
                    'text' => "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $reply_markup
                ]);
            die();
        }
    }

    public function getInfoAboutCompetition($text, $userId) {
        if ($text == '‚ö† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∑–æ–≥—Ä—ã—à–µ') {
            $competition = CronModel::getProcessCompetition();
            if (!empty($competition) && count($competition) > 0)
                $competition = $competition[0];
            else {
                Telegram::sendMessage([
                    'chat_id' => $userId,
                    'text' => '‚ö† –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å–µ–π—á–∞—Å –Ω–µ—Ç'
                ]);
                die();
            }
            $str = '';
            if ($competition->users_count)
                $str = "\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: " .CronModel::getUsersCountForCompetition($competition->id);

            Telegram::sendMessage([
               'chat_id' => $userId,
               'text' => $competition->post_content . $str,
                'parse_mode' => 'HTML'
            ]);

        }
    }

    public function getRules($text, $userId) {
        if ($text == '–ü—Ä–∞–≤–∏–ª–∞') {
            Telegram::sendMessage([
                'chat_id' => $userId,
                'text' => '–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ, –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç :)',
                'parse_mode' => 'HTML'
            ]);
        }
    }

    public function checkMyMember($text, $userId) {
        if ($text == 'üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–µ —É—á–∞—Å—Ç–∏–µ') {
            $competition = CronModel::getProcessCompetition();
            if (count($competition) < 1) {
                Telegram::sendMessage([
                    'chat_id' => $userId,
                    'text' => '‚ö† –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å–µ–π—á–∞—Å –Ω–µ—Ç'
                ]);
                die();
            }

            $subscribeChannels = unserialize($competition[0]->subscribe_channels);

            $check = true;
            foreach ($subscribeChannels as $channel) {
                $responseChannelData = Telegram::getChatMember([
                    'chat_id' => $channel,
                    'user_id' => $userId
                ]);

                if ($responseChannelData->status == 'left')
                    $check = false;
            }

            if ($check === false) {
                $getNeedChannels = unserialize($competition[0]->subscribe_channels);

                $str = "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n";
                foreach ($getNeedChannels as $channel) {

                    $responseChannelData = Telegram::getChatMember([
                        'chat_id' => $channel,
                        'user_id' => $userId
                    ]);
                    if ($responseChannelData->status == 'left')
                        $str .= "\n".$channel;
                }

                Telegram::sendMessage([
                    'chat_id' => $userId,
                    'text' => '‚ö† –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏..' . $str
                ]);
                CronModel::removeUserIfHerExist($competition[0]->id, $userId);
                die();
            }

            if ($check) {
                $idsUser = CronModel::addUserToCompetition($competition[0]->id, $userId);
                if ($idsUser) {
                    Telegram::sendMessage([
                        'chat_id' => $userId,
                        'text' => '‚úÖ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –í–∞—à –∏–¥–µ–Ω—Ç–∏–≤–∏–∫–∞—Ç–æ—Ä: ' . $idsUser
                    ]);
                } else {
                    Telegram::sendMessage([
                        'chat_id' => $userId,
                        'text' => '‚õî –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–Ω–∫—É—Ä—Å–∞.'
                    ]);
                }
            }
        }
    }

    public function getFriendMess($text, $userId) {
        if ($text == 'üë¨ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞') {
            $botName = Telegram::getMe()['username'];
            Telegram::sendMessage([
                'chat_id' => $userId,
                'text' => "üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞.\n\nhttps://t.me/".$botName."?start=".$userId
            ]);
        }
    }

}
